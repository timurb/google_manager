#!/usr/bin/env ruby
begin
  require 'gli'
  require 'google'
rescue LoadError
  require 'rubygems'
  require 'bundler/setup'
  require 'gli'
  require 'google_manager'
  require 'active_support/core_ext/hash'
  require 'pp'
end

include GLI::App

program_desc 'Manage google useres and groups'

version GoogleManager::VERSION

#desc 'Describe some switch here'
#switch [:s,:switch]

desc 'A config file to use'
default_value 'google.yml'
arg_name 'config.yml'
flag [:c,:config]

def flag_targets(c, options)
  options.each do |option|
    c.desc "A #{option} to manage"
    c.arg_name "[#{option}]", :optional => true
    c.flag [option[0], option]
  end
end

def switch_targets(c, options)
  options.each do |option|
    c.desc "A #{option} to manage"
    c.switch [option[0], option], :negatable => false
  end
end

def only_one_target(options, target_list)
    if options.select {|x| target_list.include?(x) && options[x] }.count !=1
      raise "You need to specify exactly one flag of #{target_list.map {|x| "--#{x}" }.join(", ")}"
    end
end

desc "List all the objects of specified type"
command :list do |c|
  target_list = [:user, :group, :nickname]
  switch_targets(c, target_list)

  c.action do |global_options, options, args|
    only_one_target options, target_list

    target_list.each do |target|
      puts GoogleManager::Connector.command(target, :list) if options[target]
    end
  end
end

desc "Get an object of specified type"
command :get do |c|
  target_list = [:user, :group, :nickname]
  flag_targets(c, target_list)

  c.action do |global_options, options, args|
    only_one_target options, target_list

    target_list.each do |target|
      puts GoogleManager::Connector.command(target, :get, options[target]) if options[target]
    end
  end
end

[:add, :remove, :modify].each do |action|
  desc "#{action} subscribers in group"
  command action do |c|
    flag_targets(c, [:group])

    c.desc "Members to add"
    c.arg_name "members list"
    c.flag [:m, :members]

    c.action do |global_options, options, args|
      only_one_target options, [:group]
      only_one_target options, [:members]
      puts GoogleManager::Group.send(action, options[:group], options[:members])
    end
  end
end

desc "Delete an object of specified type"
command :delete do |c|
  target_list = [:user, :group, :nickname]
  flag_targets(c, target_list)

  c.action do |global_options, options, args|
    only_one_target options, target_list

    target_list.each do |target|
      puts GoogleManager::Connector.command(target, :delete, options[target]) if options[target]
    end
  end
end

desc "create group"
command :create_group do |c|
  flag_targets(c, [:group])

  c.action do |global_options, options, args|
    only_one_target options, [:group]
    puts GoogleManager::Group.create(options[:group])
  end
end

pre do |global,command,options,args|
  config = YAML.load( File.read( global[:config])).symbolize_keys
  GoogleManager::Connector.new(config)
end

on_error do |e|
  raise e
end

exit run(ARGV)
